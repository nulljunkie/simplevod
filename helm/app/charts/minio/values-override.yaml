nameOverride: minio
persistence:
  enabled: true
  size: 2Gi
mode: standalone

auth:
  rootUser: admin
  rootPassword: admin123

provisioning:
  enabled: true
  sleepTime: 5

  buckets:
    - name: raw
      region: us-east-1
      versioning: Suspended
      withLock: true
      lifecycle:
        - id: TestPrefix7dRetention
          prefix: test-prefix
          disabled: false
          expiry:
            days: 7
            nonconcurrentDays: 3
      quota:
        type: set
        size: 1GiB
      tags:
        content: "Raw videos"
      # cors: |
      #   <CORSConfiguration>
      #       <CorsRule>
      #           <AllowedOrigin>*</AllowedOrigin>
      #           <AllowedMethod>GET</AllowedMethod>
      #       </CorsRule>
      #   </CORSConfiguration>
      eventNotifications:
        - arn: "arn:minio:sqs::rabbitmq:amqp"
          events:
            - "put"
    - name: thumbnail
      region: us-east-1
      quota:
        type: set
        size: 500MiB
      tags:
        content: "Video thumbnails"
    - name: stream
      region: us-east-1
      quota:
        type: set
        size: 1GiB
      tags:
        content: "Transcoded HLS segments and playlists"

  bucketAnonymousPolicies:
    - name: stream
      statements:
        - resources:
            - "arn:aws:s3:::stream/*"
          effect: "Allow"
          actions:
            - "s3:GetObject"
          principals: 
            - "*"
    - name: thumbnail
      statements:
        - resources:
            - "arn:aws:s3:::thumbnail/*"
          effect: "Allow"
          actions:
            - "s3:GetObject"
          principals: 
            - "*"

  users:
    - username: transcoder
      password: transcoderpassword
      policies:
        - transcoder
    - username: uploader
      password: uploaderpassword
      policies:
        - uploader
    - username: prober
      password: proberpassword
      policies:
        - prober

  userPolicies:
    - name: uploader
      statements:
        - resources:
            - "arn:aws:s3:::raw/"
          effect: "Allow"
          actions:
            - "s3:GetBucketLocation"
            - "s3:ListBucket"
            - "s3:ListBucketMultipartUploads"
        - resources:
            - "arn:aws:s3:::raw/*"
          effect: "Allow"
          actions:
            - "s3:AbortMultipartUpload"
            - "s3:DeleteObject"
            - "s3:GetObject"
            - "s3:ListMultipartUploadParts"
            - "s3:PutObject"
        - resources:
            - "arn:aws:s3:::thumbnail/"
          effect: "Allow"
          actions:
            - "s3:GetBucketLocation"
            - "s3:ListBucket"
        - resources:
            - "arn:aws:s3:::thumbnail/*"
          effect: "Allow"
          actions:
            - "s3:DeleteObject"
            - "s3:GetObject"
            - "s3:PutObject"
    - name: prober
      statements:
        - resources:
            - "arn:aws:s3:::raw/"
          effect: "Allow"
          actions:
            - "s3:GetBucketLocation"
            - "s3:ListBucket"
        - resources:
            - "arn:aws:s3:::raw/*"
          effect: "Allow"
          actions:
            - "s3:GetObject"
    - name: transcoder
      statements:
        - resources:
            - "arn:aws:s3:::stream/"
          effect: "Allow"
          actions:
            - "s3:GetBucketLocation"
            - "s3:ListBucket"
        - resources:
            - "arn:aws:s3:::stream/*"
          effect: "Allow"
          actions:
            - "s3:GetObject"
            - "s3:PutObject"

  config:
    - name: notify_amqp:rabbitmq
      options:
        url: "amqp://transcode:password@simplevod-rabbitmq.default:5672/transcode"
        exchange: "video"
        exchange_type: "topic"
        routing_key: "video.upload"
        mandatory: "off"
        durable: "on"
        no_wait: "off"
        internal: "off"
        auto_deleted: "off"
        delivery_mode: "2"
        publisher_confirms: "off"
        queue_limit: "0"
        queue_dir: ""

metrics:
  enabled: true


containerPorts:
  api: 9000
  console: 9001

service:
  ports:
    api: 80
    console: 9001

ingress:
  enabled: true
  hostname: console.minio.simplevod.app
  tls: true
  tlsSecret: ingress-tls
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"

apiIngress:
  enabled: true
  hostname: api.minio.simplevod.app
  tls: true
  tlsSecret: ingress-tls
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/client-body-buffer-size: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
